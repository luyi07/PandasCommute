/*
This file contains: 
iso_int_generator(...)

still needs to add comment lines and this line:
num_GME, spe[0], spe[1], spe[2], ...


iso_int_generator.cpp read shell info from file_sp. 
See documentations of functions read_nj() and read_sp() in code/input.cpp for expectated formats in file_sp.
Then it generates (to be random) isospin-conserving interactions and print them into file_iso_int.
According to conventions of the BigStick, it leave out terms: 
        V(bacd;JT), V(abdc;JT) and V(cdab;JT) if V(abcd;JT) is to
be printed.
*/
void iso_int_generator(char *file_sp, char *file_iso_int){
//	read in single particle orbits
	int nj_p, nj;
	read_nj(file_sp, nj_p, nj);
	
	int *nn=new int[nj];
	int *ll=new int[nj];
	int *jj=new int[nj];

	read_sp(file_sp, nj, nn, ll, jj);
//	label sequences of orbits, according their j value, from large to small
	int *seq=new int[nj_p];
	for(int i=0;i<nj_p;i++){
		seq[i]=i;//0,1,2,...
	}
	for(int i=0;i<nj_p;i++){
		for(int j=i;j<nj_p-1;j++){
			if(jj[seq[j]]<jj[seq[j+1]]){//bubble algorithm: large jj sinks to bottom
				int temp=seq[j];
				seq[j]=seq[j+1];
				seq[j+1]=temp;
			}
		}
	}
	cout<<"seq:";
	for(int i=0;i<nj_p;i++)cout<<seq[i]<<",";
	cout<<endl;
//	calculate J_min, J_max
	int J_min=1E6, J_max=0;
	for(int i=0;i<nj_p;i++)//just the triangle rule
	for(int j=0;j<nj_p;j++){
		if(J_min>abs(jj[i]-jj[j]))J_min=abs(jj[i]-jj[j]);
		if(J_max<jj[i]+jj[j])J_max=jj[i]+jj[j];
	}
	cout<<"J_min= "<<J_min<<" J_max="<<J_max<<endl;
//	number of interactions
	int num_int=0;
        for(int T=0;T<=1;T++)
        for(int J=J_min;J<=J_max;J+=2){
                for(int a=0;a<nj_p;a++)
                for(int b=a;b<nj_p;b++)//kick out V(bacd;JT)
                for(int c=0;c<nj_p;c++)
                for(int d=c;d<nj_p;d++)//kick out V(abdc;JT)
                if(a<c||(a==c&&b<=d))//kick out V(cdab;JT)
                if(J>=abs(jj[seq[a]]-jj[seq[b]])
                &&J<=jj[seq[a]]+jj[seq[b]]//triangle rules
                &&J>=abs(jj[seq[c]]-jj[seq[d]])
                &&J<=jj[seq[c]]+jj[seq[d]])
                if( (ll[seq[a]]+ll[seq[b]])%2==(ll[seq[c]]+ll[seq[d]])%2)//parity conservation
                if(a!=b||((jj[seq[a]]+jj[seq[b]]+J)/2+T)%2==0)//in j-j coupling, J=even/odd when T=1/0
                if(c!=d||((jj[seq[c]]+jj[seq[d]]+J)/2+T)%2==0){
			num_int++;
                }
        }
	cout<<"num_int="<<num_int<<endl;
//	print interactions
	FILE *fp;
	if((fp=fopen(file_iso_int,"w"))==NULL)
	cout<<"error: failed to open "<<file_iso_int<<endl;

	fprintf(fp,"!generated by iso_int_generator.cpp\n");
	fprintf(fp,"%d\t%lf\t%lf\t%lf\n",num_int,0.0,0.0,0.0);
//	print T=0 interactions
	for(int T=0;T<=1;T++)
	for(int J=J_min;J<=J_max;J+=2){
		for(int a=0;a<nj_p;a++)
		for(int b=a;b<nj_p;b++)//kick out V(bacd;JT)
		for(int c=0;c<nj_p;c++)
		for(int d=c;d<nj_p;d++)//kick out V(abdc;JT)
		if(a<c||(a==c&&b<=d))//kick out V(cdab;JT)
		if(J>=abs(jj[seq[a]]-jj[seq[b]])
		&&J<=jj[seq[a]]+jj[seq[b]]//triangle rules
		&&J>=abs(jj[seq[c]]-jj[seq[d]])
		&&J<=jj[seq[c]]+jj[seq[d]])
		if( (ll[seq[a]]+ll[seq[b]])%2==(ll[seq[c]]+ll[seq[d]])%2)//parity conservation
		if(a!=b||((jj[seq[a]]+jj[seq[b]]+J)/2+T)%2==0)//in j-j coupling, J=even/odd when T=1/0
		if(c!=d||((jj[seq[c]]+jj[seq[d]]+J)/2+T)%2==0){
			fprintf(fp,"%d\t%d\t%d\t%d\t%d\t%d\t%lf\n", seq[a]+1, seq[b]+1, seq[c]+1, seq[d]+1, J/2, T, 0.33333);
		}
	}
	fclose(fp);
	delete [] seq;
	delete [] nn;
	delete [] ll;
	delete [] jj;
}
